import axios from 'axios';
import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useRef, useState } from 'react';
import Menu from '../components/menu/menu';
import Message from '../components/chat/chat-message/message';
import LoginModal from '../components/modals/login-modal/login-modal';
import RegistrationModal from '../components/modals/registration-modal/registration-modal';
import { BACKEND_URL } from '../services/route';
import { getToken } from '../services/token';
import styles from '../styles/Home.module.scss';


export default function Home({ messages }) {
  const inputRef = useRef(null);
  const ws = useRef(null);

  const [registrationIsOpen, setIsRegistrationOpen] = useState(false);
  const [loginIsOpen, setIsLoginOpen] = useState(false);
  const [userName, setUserName] = useState(null);
  const [allMessages, setAllMessages] = useState(messages);

  const handleWebSocket = () => {
    if (inputRef.current.value) {
      ws.current.send(JSON.stringify({ message: inputRef.current.value, username: userName }));
    }
  }

  const handleSendMessage = (evt) => {
    evt.preventDefault();
    handleWebSocket();
    inputRef.current.value = '';
  }


  // useEffect(() => {
  //   setAllMessages(messages);
  // }, []);

  useEffect(() => {
    ws.current = new WebSocket('ws://localhost:5000/');


    ws.current.onmessage = (event) => {
      const newMessage = JSON.parse(event.data);
      console.log(newMessage);
      const newMessages = [...allMessages, newMessage];

      setAllMessages(newMessages);
    }
  }, [])

  useEffect(() => {
    axios
      .post('http://localhost:5000/', {
        token: getToken(),
      })
      .then((response) => {
        setUserName(response.data.username);
        response.data.isAuth ? setIsLoginOpen(false) : setIsLoginOpen(true);
      })
      .catch((error) => {
        setIsLoginOpen(true);
        console.log('пользователь не авторизован');
      });
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Elijah's chat</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <Menu setModalIsOpen={setIsLoginOpen} userName={userName} />
        <div className={styles.form_container}>

          <input type="text" ref={inputRef} className={styles.content_input} maxLength={360} disabled={userName ? false : true} />
          <button id='btn' type='button' className={styles.content_button} onClick={handleSendMessage}>Отправить письмо любви</button>
        </div>
        <div className={styles.chat_container}>
          {allMessages.map((message, index) => {
            return <Message key={index} message={message.message} username={message.username} />
          }).reverse()}
        </div>
        <RegistrationModal setIsOpen={setIsRegistrationOpen} modalIsOpen={registrationIsOpen} />
        <LoginModal setIsOpen={setIsLoginOpen} modalIsOpen={loginIsOpen} setUserName={setUserName} setIsRegistrationOpen={setIsRegistrationOpen} />
      </main>
    </div>
  );
}

export async function getStaticProps() {
  const response = await axios.get(`${BACKEND_URL}/msgs/some`, { params: { page: 1, limit: 100 } });
  const messages = await response.data;

  return {
    props: {
      messages,
    },
  }
}